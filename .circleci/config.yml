version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  slack: circleci/slack@3.4.2

workflows:
  lint:
    jobs:
      - lint:
          context: aws
      - build-and-deploy-charms-on-aws:
          context: aws
          requires:
            - lint

jobs:
  lint:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          command: pip install tox
      - run:
          name: Run Lint
          command: |
            make lint

  build-and-deploy-charms-on-aws:
    machine:
      image: ubuntu-1604:202004-01

    environment:
      JUJU_DATA: /home/circleci/project/.local/share/juju

    steps:
      - checkout

      - run:
          name: "Add /snap/bin to PATH"
          command: |
            echo 'export PATH=/snap/bin:$PATH' >> $BASH_ENV
            source /home/circleci/.bashrc

      - run:
          name: "Install snapd"
          command: |
            sudo apt-get update
            sudo apt-get install --only-upgrade -y snapd

      - run:
          name: "Install charmcraft"
          command: |
            sudo snap install charmcraft --beta

      - run:
          name: "Install Juju"
          command: |
            sudo apt-get purge juju
            sudo snap install juju --classic

      - run:
          name: "Install Juju wait"
          command: |
            sudo snap install juju-wait --classic

      - run:
          name: "clone charms"
          command: |
            git clone git@github.com:omnivector-solutions/slurm-charms.git
            for charm in slurmdbd slurmd slurmctld slurmrestd; do
                rm ./slurm-charms/charm-$charm/requirements.txt
                if [[ $charm == "slurmdbd" ]]; then
                    echo -e "git+https://github.com/omnivector-solutions/slurm-ops-manager.git@$CIRCLE_SHA1 \nops \ngit+https://github.com/omnivector-solutions/interface-mysql.git@master" > ./slurm-charms/charm-$charm/requirements.txt
                else
                    echo -e "git+https://github.com/omnivector-solutions/slurm-ops-manager.git@$CIRCLE_SHA1 \nops" > ./slurm-charms/charm-$charm/requirements.txt
                fi
            done
            cd slurm-charms/ && make charms &&  cd ../

      - run:
          name: "pull credentials from s3 and add model and deploy bundle"
          no_output_timeout: 20m
          command: |
            aws s3 cp s3://omnivector-cicd/juju-local/juju-local.tar.gz .
            tar -xzvf juju-local.tar.gz

            echo $JUJU_CIRCLECI_USER_PASSWORD | juju login --user circleci
            juju add-model circleci-$CIRCLE_SHA1
            juju add-space -m circleci-$CIRCLE_SHA1 nat 172.31.90.0/24 172.31.91.0/24 172.31.92.0/24 172.31.93.0/24
            cd slurm-charms/ && make pull-classic-snap && cd ../
            juju deploy -m circleci-$CIRCLE_SHA1 ./slurm-charms/bundles/slurm-core-bionic-aws/bundle.yaml

      - run:
          name: "Wait for deployment status"
          no_output_timeout: 20m
          command: |
            echo $JUJU_CIRCLECI_USER_PASSWORD | juju status -m circleci-$CIRCLE_SHA1
            juju-wait -w -t 1150

      - run:
          name: "Juju Status"
          command: |
            echo $JUJU_CIRCLECI_USER_PASSWORD | juju login --user circleci
            juju status -m circleci-$CIRCLE_SHA1
          when: always

      - run:
          name: "Remove applications"
          command: |
            echo $JUJU_CIRCLECI_USER_PASSWORD | juju login --user circleci
            juju remove-application slurmd slurmdbd slurmctld slurmrestd percona-cluster
            juju-wait -w -t 1150
          when: always

      - run:
          name: "Force remove machine if hanging and destroy-model"
          command: |
            echo $JUJU_CIRCLECI_USER_PASSWORD | juju login --user circleci
            # Check to see if the model is empty, --force detroy-machines if not
            if ! [ `juju status 2>&1 | grep -c empty` -gt 0 ]; then
                juju remove-machine -m circleci-$CIRCLE_SHA1 {0..10} --force
            fi
            juju destroy-model circleci-$CIRCLE_SHA1 -y
          when: always
